{"version":3,"sources":["constants.js","reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","index.js"],"names":["action_constants","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Card","name","email","id","className","alt","src","CardList","cardsArray","map","user","index","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","prop","style","overflow","height","border","children","ErrorBoundary","props","hasError","this","setState","Component","App","onRequestRobots","onSearchChanged","filteredRobots","filter","toLocaleLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","action","Object","assign","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.66665e20.chunk.js","sourcesContent":["const action_constants = {\n    CHANGE_SEARCH_FIELD : 'CHANGE_SEARCH_FIELD',\n    REQUEST_ROBOTS_PENDING : 'REQUEST_ROBOTS_PENDING',\n    REQUEST_ROBOTS_SUCCESS : ' REQUEST_ROBOTS_SUCCESS',\n    REQUEST_ROBOTS_FAILED : 'REQUEST_ROBOTS_FAILED'\n}\n\nexport default action_constants;","import action_constants from './constants'\n\n\n\nconst initialStateSearch = {\n    searchField : ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n   \n    switch (action.type){\n        case action_constants.CHANGE_SEARCH_FIELD :\n            return Object.assign({}, state, {searchField : action.payload});\n        default:\n            return state;\n    }\n\n}\n\nconst initialStateRobots = {\n  isPending : false,\n  robots : [],\n  error : ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type){\n        case action_constants.REQUEST_ROBOTS_PENDING :\n            return Object.assign({}, state, {isPending : true});\n        case action_constants.REQUEST_ROBOTS_SUCCESS :\n            return Object.assign({}, state, {robots: action.payload,isPending : false});\n        case action_constants.REQUEST_ROBOTS_FAILED :\n            return Object.assign({}, state, {isPending :false, error:action.payload});\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nconst Card  = ({name, email, id})=> {\n        return(\n            <div className='bg-light-green dib br3 pa3 ma2 grow tc bw2 shadow-5'>\n                <img alt='robot' src={`https://robohash.org/${id}?size=200x200`}></img>\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        );\n    \n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\n\n\nconst CardList = ({robots}) => {\n  const cardsArray =   robots.map((user, index) => {\n                            return ( <Card key= {index} name = {user.name} email = {user.email} id = {user.id}/>)\n                        });\n    \n   return(<div>\n            {cardsArray}\n         </div>);\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchField, searchChange}) => {\n  \n    return(\n  <div>\n      <input \n      aria-label='Search Robots'\n      type='search' \n      placeholder='search robots'  \n      className='pa3 ba b--green bg-lightest-blue' \n      onChange= { searchChange } \n       />\n  </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (prop) => {\n    return(\n        <div style={{overflow: 'scroll', height:'800px', border:'3px solid black '}}>\n            {prop.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, {Component} from  'react'\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(){\n        this.setState({hasError : true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return(<h1>Sorry, error loading list.</h1>)\n        }\n\n        return this.props.children;\n\n    }\n}\n\nexport default ErrorBoundary","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport './App.css';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport { setSearchField , requestRobots} from '../actions'\n\n\n\n\nconst mapStateToProps = (state) =>{\n    return {\n        searchField : state.searchRobots.searchField,\n        isPending : state.requestRobots.isPending,\n        robots : state.requestRobots.robots,\n        error : state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n             onSearchChanged: (event) => {\n             dispatch(setSearchField(event.target.value))\n            },\n\n             onRequestRobots : () => { \n                 dispatch(requestRobots())\n             }\n        }\n   }\n\n\nclass App extends Component {\n\n\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        \n        const {searchField, onSearchChanged, robots, isPending} = this.props;\n       \n        const filteredRobots = robots.filter(robots => {\n            return robots.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n        })\n \n        if(isPending){\n            return(<h1>Loading....</h1>)\n        }\n        else{\n        return(\n            <div className ='tc'>\n                <h1 className='f1'>Robofriends</h1>\n                <SearchBox searchChange= {onSearchChanged} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots = {filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","\nimport action_constants from './constants'\n\nexport const setSearchField = (text) => {\n    return {\n        type : action_constants.CHANGE_SEARCH_FIELD,\n        payload : text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type : action_constants.REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {return response.json()})\n    .then(data =>  dispatch({type: action_constants.REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: action_constants.REQUEST_ROBOTS_FAILED, payload: error}))\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers, compose} from 'redux'\nimport {searchRobots, requestRobots } from './reducers'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport App from './containers/App'\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers( applyMiddleware(thunkMiddleware, logger))); //added redux-devtools from chrome store.\n\n\nReactDOM.render(<Provider store = {store}>\n                    <App />\n                </Provider>\n         , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}