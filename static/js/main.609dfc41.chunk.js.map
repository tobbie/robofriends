{"version":3,"sources":["serviceWorker.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","CardList","robots","Error","SearchBox","searchField","searchChange","type","placeholder","className","onChange","Scroll","prop","style","overflow","height","border","children","ErrorBoundary","props","state","hasError","this","setState","Component","App","onSearchChanged","event","target","value","fetch","then","response","json","users","filteredRobots","filter","name","toLocaleLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCASC,EAbE,SAAC,GAAa,EAAZC,OAEf,MAAM,IAAIC,MAAM,yBCSLC,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAE7B,OACF,6BACI,2BACAC,KAAK,SACLC,YAAY,gBACZC,UAAU,mCACVC,SAAUJ,MCADK,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAO,QAASC,OAAO,qBACnDJ,EAAKK,YCmBHC,E,YArBX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAHA,E,iFAQdC,KAAKC,SAAS,CAACF,UAAW,M,+BAI1B,OAAGC,KAAKF,MAAMC,SACH,0DAGJC,KAAKH,MAAMF,a,GAjBEO,aCmDbC,E,YA7CX,aAAc,IAAD,8BACT,+CAOJC,gBAAkB,SAACC,GACf,EAAKJ,SAAS,CAAClB,YAAcsB,EAAMC,OAAOC,SAP1C,EAAKT,MAAQ,CACXlB,OAAS,GACTG,YAAc,IAJP,E,iFAYO,IAAD,OACfyB,MAAM,8CACAC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GACU,EAAKX,SAAS,CAACrB,OAASgC,S,+BAIxC,IAAD,EAC0BZ,KAAKF,MAA5BlB,EADH,EACGA,OAAQG,EADX,EACWA,YACT8B,EAAiBjC,EAAOkC,QAAO,SAAAlC,GACjC,OAAOA,EAAOmC,KAAKC,oBAAoBC,SAASlC,EAAYiC,wBAGhE,OAAqB,IAAlBpC,EAAOsC,OACC,2CAIP,yBAAK/B,UAAW,MACZ,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWH,aAAegB,KAAKI,kBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAUiC,W,GArC1BX,aCClBiB,IAASC,OAAO,kBAAC,EAAD,MACLC,SAASC,eAAe,SN0H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.609dfc41.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport Card from './Card'\n\n\n\nconst CardList = ({robots}) => {\n  if(true){\n    throw new Error('Noooooooooooooo!!!!!');\n  }\n  const cardsArray =   robots.map((user, index) => {\n                            return ( <Card key= {index} name = {user.name} email = {user.email} id = {user.id}/>)\n                        });\n    \n   return(<div>\n            {cardsArray}\n         </div>);\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchField, searchChange}) => {\n  \n    return(\n  <div>\n      <input  \n      type='search' \n      placeholder='search robots'  \n      className='pa3 ba b--green bg-lightest-blue' \n      onChange={searchChange} \n       />\n  </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (prop) => {\n    return(\n        <div style={{overflow: 'scroll', height:'800px', border:'3px solid black '}}>\n            {prop.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, {Component} from  'react'\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(){\n        this.setState({hasError : true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return(<h1>Sorry, error loading list.</h1>)\n        }\n\n        return this.props.children;\n\n    }\n}\n\nexport default ErrorBoundary","import React, {Component} from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport './App.css';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n          robots : [],\n          searchField : ''\n        }\n    }\n\n    onSearchChanged = (event) => {\n        this.setState({searchField : event.target.value});\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n             .then(response => {return response.json()})\n             .then(users => {\n                             this.setState({robots : users})\n                             });\n    }\n\n    render(){\n        const {robots, searchField} = this.state;\n        const filteredRobots = robots.filter(robots => {\n            return robots.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n        })\n \n        if(robots.length === 0){\n            return(<h1>Loading....</h1>)\n        }\n        else{\n        return(\n            <div className ='tc'>\n                <h1 className='f1'>Robofriends</h1>\n                <SearchBox searchChange= {this.onSearchChanged} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots = {filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n    }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nimport App from './containers/App'\n\nReactDOM.render(<App />\n         , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}